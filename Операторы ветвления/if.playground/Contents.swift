
/// Проверка корректности алгоритма без входных данных

// Базовые виды алгоритмов в программировании:

// 1. Линейный алгоритм без входных данных:

// 1
/// Ход выполнения переходит к линейному логическому оператору if
if true { /// Если значение выражения bool -> true, то перейди к поочередному выполнению кода от открывающейся до закрывающейся фигурной скобки, "{" - от и до - "}", как выполнишь весь код и дойдешь до закрывающей фигурной скобки и после неё будут логический оператор "else" и "else if" - игнорируй их и перейди к выполнению следующих выражений и инструкций.
    // Код в фигурных скобках - отсутствует, выполнять нечего
}
/// Ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.
/// Итог: if выражение bool -> true; 1 вариант ветвления


// 1.1
/// Ход выполнения переходит к линейному логическому оператору if
if false { // Если значение выражения bool -> false, то код в теле оператора if "{}" не будет выполнен и дальше будет 3 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть оператор "else" то ход выполнения перейдет в него;
    // 2 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 3 - если после "}" нет ни оператора "else" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
}
/// Ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.
/// Итог: if выражение bool -> false; 3 варианта ветвления


// 1.2
/// Ход выполнения переходит к линейному логическому оператору if
if false {// Если значение выражения bool -> false, то код в теле оператора if "{}" не будет выполнен и дальше будет 3 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть оператор "else" то ход выполнения перейдет в него;
    // 2 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 3 - если после "}" нет ни оператора "else" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
} else {// Оператор "else" (Иначе) не содержит значение выражения, код в теле оператора else "{}" будет выполнен как только ход выполнения программы дойдет до него. После данного оператора ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.
// Код в фигурных скобках - отсутствует, выполнять нечего
}
// Ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.

// 1.3
/// Ход выполнения переходит к линейному логическому оператору if
if false { // Если значение выражения bool -> false, то код в теле оператора if "{}" не будет выполнен и дальше будет 3 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть оператор "else" то ход выполнения перейдет в него;
    // 2 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 3 - если после "}" нет ни оператора "else" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
} else if true { // Если значение выражения bool -> true, то перейди к выполнению кода от открывающейся до закрывающейся фигурной скобки, "{" - от и до - "}", как выполнишь весь код и дойдешь до закрывающей фигурной скобки и после неё будут логический оператор "else" и "else if" - игнорируй их и перейди к выполнению следующих выражений и инструкций.
// Код в фигурных скобках - отсутствует, выполнять нечего
}
/// Ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.


// 1.4
if false { // Если значение выражения bool -> false, то код в теле оператора if "{}" не будет выполнен и дальше будет 3 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть оператор "else" то ход выполнения перейдет в него;
    // 2 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 3 - если после "}" нет ни оператора "else" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
} else if false { //Если значение выражения bool -> false, то код в теле оператора else if "{}" не будет выполнен и дальше будет 2 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 2 - если после "}" есть оператор "else"
    // 3 - если после "}" нет ни оператора "else if" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
} else if false {//Если значение выражения bool -> false, то код в теле оператора else if "{}" не будет выполнен и дальше будет 2 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 2 - если после "}" есть оператор "else"
    // 3 - если после "}" нет ни оператора "else if" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
}
/// Ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.


// 1.5
if false {// Если значение выражения bool -> false, то код в теле оператора if "{}" не будет выполнен и дальше будет 3 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть оператор "else" то ход выполнения перейдет в него;
    // 2 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 3 - если после "}" нет ни оператора "else" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
} else if false {//Если значение выражения bool -> false, то код в теле оператора else if "{}" не будет выполнен и дальше будет 2 варианта дальнейшего хода выпонения:
    // 1 - если после "}" есть логический оператор "else if" то ход выполнения перейдет в него;
    // 2 - если после "}" есть оператор "else"
    // 3 - если после "}" нет ни оператора "else if" ни оператора "else if", то ход выполнения переходит к выполнению следующих выражений и инструкций.
} else {// Оператор "else" (Иначе) не содержит значение выражения, код в теле оператора else "{}" будет выполнен автоматически, если ход выполнения программы дошёл до него. После данного оператора ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.
    // Код в фигурных скобках - отсутствует, выполнять нечего
}
/// Ход выполнения переходит к выполнению следующих выражений и инструкций, если дальше ничего нет - ход выполнения заверщается.


// 2. Циклический алгоритм:
/*
while true {
    // Код в фигурных скобках - отсутствует, выполнять - нечего
}
 */
// while true { // Пока значение выражения bool -> true - бесконечно поочерёдно выполняй весь код от открывающейся до закрывающейся фигурной скобки, "{" - от и до - "}", как дойдешь до закрывающей фигурной скобки - сново продолжай бесконечно выполняй весь код в теле оператора

/// Ход выполнения НЕ переходит к выполнению следующих выражений и инструкций, пока значение выражения в циклическом операторе while bool -> true

// 2.1
while false { // Пока значение выражения bool -> false, то код в теле циклического оператора while "{}" не будет выполнен, перейди к выполнению следующих выражений и инструкций.
    // Код в фигурных скобках - отсутствует, выполнять - нечего
}
/// Ход выполнения переходит к выполнению следующих выражений и операторов, пока значение выражения в циклическом операторе while bool -> false

// 3
/*
repeat { // Выполни поочерёдно весь код от открывающейся до закрывающейся фигурной скобки, "{" - от и до - "}", как дойдешь до закрывающей фигурной скобки - перейди в циклический оператор while
    // Код в фигурных скобках - отсутствует, выполнять - нечего
} while true // Пока значение выражения bool -> true - бесконечно поочерёдно выполняй весь код в теле операторе repeat
*/
/// Ход выполнения НЕ переходит к выполнению следующих выражений и инструкций, пока значение выражения в циклическом операторе while bool -> true


// 3.1
repeat { //Выполни поочерёдно весь код от открывающейся до закрывающейся фигурной скобки, "{" - от и до - "}", как дойдешь до закрывающей фигурной скобки - перейди в циклический оператор while
    // Код в фигурных скобках - отсутствует, выполнять - нечего
} while false // Пока значение выражения bool -> false, то код в теле оператора repeat не будет выполнен, перейди к выполнению следующих выражений и инструкций.

/// Ход выполнения переходит к выполнению следующих выражений и операторов, пока значение выражения в циклическом операторе while bool -> false

// 4

// 3. Алгоритм ветвления:


/// Алгорит с входными данными
/// Проверка корректности алгоритма (все ли условия учтены?)
/// Проверка корректности алгоритма с входными данными
