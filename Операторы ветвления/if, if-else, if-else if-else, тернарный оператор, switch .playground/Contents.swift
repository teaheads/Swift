// Оператор условя if (если)
// проверяемое_условие = true, то выполни код в скобках
// проверяемое_условие -> Bool, соответственно он ограничен использованием логических типов данных: (!, &&, ||), опрераторов сравнения (<, >, <=, >=, ==, !=), операторов диапазона и переменных/констант что хранят в себе bool-евые значения. В результате возвращает либо true, либо false.
// Мы не можем вернуть Int, Float, Double, String.

// if, сокрашенный синтаксис опрератора

if true {
    1
}
/// Вход
// проверяемое_условие = true
// Выполняется код в теле оператора:
// 1
/// Выход


// Пример с переменной хранящей bool
let myVar = true

if myVar {
    print("True")
}
/// Вход
// проверяемое_условие: myVar хранит в себе true, проверяемое_условие = true
// Выполняется код в теле оператора:
// print("True")
/// Выход


let value = 5

if value == 5 {
    print("True")
}
/// Вход
// проверяемое_условие: value = 5, value == 5, проверяемое_условие = true
// Выполняется код в теле оператора:
// print("True")
/// Выход


if value > 1 {
    print("\(value) больше 1-го")
}

if value <= 1 {
    print("\(value) меньше или равно 1-му")
}

if value >= 1 {
    print("\(value) больше или равно 1-му")
}

if value == 1 {
    print("\(value) равняется 1-му")
}
/// Вход
// проверяемое_условие: value = 5, 5 == 1, проверяемое_условие = false
/// Выход


if value != 1 {
    print("\(value) не равняется 1-му")
}

// if else, стандартный синтаксис опрератора

if true {
    1
} else {
    2
}

if value < 1 {
    print("\(value) больше 1-го")
} else {
    print("\(value) меньше 1-го")
}

// if, else if, else, расширенный синтаксис оператора

if value == 1 { // условие, в которое заходит значение константы, проверка на соответствие условию
    print("\(value) равняется 1-му") // условие не удволетворено - команда не выполняется, переход к следующему условию в кострукцию ниже, в else if
} else if value < 1 { // условие, в которое дальше заходит значение константы, проверка на соответствие условию
    print("\(value) меньше 1-го") // условие не удволетворено - команда не выполняется, в таком случае выполняется переход к else
} else { // не содержит условий, выполняется, если условия выше не были удволетворены
    print("Ни одного условия не было удволетворено") // выполняется данная команда, т.к условия в if и else if небыли удволетворены
}

// ~= оператор проверки значения на наличие его в диапазоне
// Без ~=
let n = 100

if n >= 10 && n <= 100 {
    print("inside!")
}

// С ~=
if 10...100 ~= n {
    print("inside! (using patterns)")
}

// Расчитываем стоимость аренды на одного жильца
var tenanCount = 6 // исходное колл-во жильцов в квартире
var rentPrice = 0 // или var rentPrice: Int // стоимость аренды на человека, это входное значение в условную конструкцию по вычислению стоимости аренды, т.к стоимость нам надо расчитать с помощью if, то начальное входное значение будет присвоено 0

if tenanCount < 5 {
    rentPrice = 1000
} else if tenanCount >= 5 && tenanCount <= 7 { // Оператор логического И (&&) записывается между двух операндов и возвращает логическое значение true, если оба операнда имеют значение true; в противном случае он возвращает значение false.
    rentPrice = 800
} else {
    rentPrice = 500
}
// Считаем доход в месяц с учетом новых данных
var sum = tenanCount * rentPrice
print("\(tenanCount) жильцов в одной комнате будут мне платить \(sum) рублей в месяц")
rentPrice

// Перепишем блок else if с && на опрератор диапазона, для проверки таких условий есть switch, использование операторов диапазона там намного уместнее, чем в if

if tenanCount < 5 {
    rentPrice = 1000
} else if 5...7 ~= tenanCount {
    rentPrice = 800
} else {
    rentPrice = 500
}

// Тернарный опрератор
// условие ? действие1 : действие2

// if else, который будем переписывать с помощью тернарного оператора
var x = 1

if x < 0 {
    1
} else {
    0
}
x

// Переписываем с помощью тернорного оператора
x < 0 ? 1 : 0
x

// В данном случае он ничего не возвращает, (нечего возвращать, т.к print()) а просто выполняет условие

let a = 1
let b = 2

a <= b ? print("a<=b") : print("a>=b")

// В данно случае тернарный опрератор возвращает и сохраняет значение: либо 20, либо 10
var height = 180
var isHeader = true

var rowHeight = (height + (isHeader ? 20 : 10)) // ТО возвращает 20, которая складывается со значением height (где height - 180, это входное значение), и полученное значение присваивается входящей переменной rowHeight, в итоге rowHeight = 200
rowHeight
height

// Зона видимости: входящие значения и присвоение им новых данных
// Если в конструкцию if else входят данные от внешней переменной, то в результате присвоения ей нового значения в одном из блоков инструкции if else поменяется значение и во внешней входной переменной.

 var AAA: Int = 0
 var BBB: Double = 1

 if true {
     var CCC: Float = 1.1
     CCC = 1.2
     AAA + 1
     BBB = 2
 }
 print(AAA)
 print(BBB)

 print("____________________")

// Возвращение значения с присвоением во входящую переменную enterValue

var enterValue = 1

if enterValue < 0 {
    enterValue - 7
} else {
    enterValue = 7 // в этом-то и дело, внешней входящей переменной в конструкции было присвоенно новое значение с помощью опрератора присвивания = , теперь это новое значение входящей переменной будет сохранено при выходе из if else
    print(enterValue)
}
enterValue // когда входила значение было 1, в if else присвоили 7 (enterValue = 7)

// передаём переменную enterValue с новым присвоенным значением из предидущей конструкции:

enterValue

 if enterValue < 0 {
     enterValue - 7
 } else {
     enterValue + 7
     print(enterValue) // Вычисления без записи куда-либо, т.к мы не присваиваем новое значение переменной в конструкции if else, входящее значение остаётся тем же, что и было на входе, опреатор сложения + в области видимости в блоке else на это не повлиял
 }
enterValue // ¯\_(ツ)_/¯

// Тернарный опрератор с сохраняемых возвращенным значением
x = x < 0 ? -7 : 7
x

// Тернарный опрератор с сохраняемых возвращенным значением, более чиаемый вариант записи
x = (x < 0 ? -7 : 7)
x

// Конструкция switch-case
// Перепишем с помощью switch уже известную конструкцию if
// Отдельные выражения внутри проверяемого выражения (условия) могут отделяться друг от друга <,> она эквивалентна && (и)

rentPrice
tenanCount
switch tenanCount {
case 5:
    rentPrice = 1000
case 5...7:
    rentPrice = 800
default:
    rentPrice = 500
}
rentPrice

var integer = 1488

switch integer {
case 0...2: print("Мало")
case 3...10: print("Несколько")
case 11...100: print("Много")
case 101...1000: print("Сотни")
default: print("Another value")
}
integer

// Как это будет выглядеть, если переписать с использованием условной инструкции if
if 0...2 ~= integer {
    print("Мало")
} else if 3...10 ~= integer {
    print("Несколько")
} else if 11...100 ~= integer {
    print("Много")
} else if 101...1000 ~= integer {
    print("Сотни")
} else {
    print("Another value")
}
integer

let sumCharacter = "Y"

switch sumCharacter {
case "A", "E", "I", "O", "U":
    print("Гласная буква")
case "B", "C", "D", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Z":
    print("Согласная буква")
case "Y":
    print("Если Y находится в первом слоге слова, в котором содержатся ещё другие буквы кроме Y, то Y читатется как согласная буква")
    print("Во всех иных случаях буква Y читается как гласная")
default:
    print("Ошибка: при вводе используйте только прописную букву латинского алфавита")
}

if sumCharacter == "A" || sumCharacter == "E" || sumCharacter == "I" || sumCharacter == "O" || sumCharacter == "U" {
    print("Гласная буква")
} else if sumCharacter == "B" || sumCharacter == "C" || sumCharacter == "D" || sumCharacter == "F" || sumCharacter == "G" || sumCharacter == "H" || sumCharacter == "J" || sumCharacter == "K" || sumCharacter == "L" || sumCharacter == "M" || sumCharacter == "N" || sumCharacter == "P" || sumCharacter == "Q" || sumCharacter == "R" || sumCharacter == "S" || sumCharacter == "T" || sumCharacter == "V" || sumCharacter == "W" || sumCharacter == "X" || sumCharacter == "Z" {
    print("Согласная буква")
} else if sumCharacter == "Y" {
    print("Если Y находится в первом слоге слова, в котором содержатся ещё другие буквы кроме Y, то Y читатется как согласная буква")
    print("Во всех иных случаях буква Y читается как гласная")
} else {
    print("Ошибка: при вводе используйте только прописную букву латинского алфавита")
}
// используем print() за пределами оператора switch

let userMark = 4
let message: String

switch userMark {
case 1:
    message = "Ужасно"
case 2:
    message = "Плохо"
case 3:
    message = "Средне"
case 4:
    message = "Хорошо"
case 5:
    message = "Отлично"
default:
    message = "Ошибка"
}
print(message)

// Самое ВАЖНОЕ отличие конструкции switch от if-else if-else заключается в том, что проверяемое_выражение в switch может венуть значение любого типа данных: строки, числа, диапазоны, кортежи при условии того, что проверяемое_выражение и значение - одного типа.

let range = 1
var sumRange = 1...10

switch range {
case 1...5:
    sumRange = 1...20
default:
    print("Error")
}
sumRange
