// Объявим константу и проинициализируем ей кортеж, тип данных задется невно

let myProgramStatus = (200, "In Work", true)
myProgramStatus

let tuple1 = (200, "In Work", true)
let tuple2 = (true, "On Work", 200)

type(of: tuple1) == type(of: tuple2)

// Объявим константу и проинициализируем ей кортеж, тип данных зададим явно
let floatStatus: (Float, String, Bool) = (200.2, "In Work", true)

// Объявляем псевдоним типа для Int
typealias numberType = Int

// Объявим константу и проинициализируем ей кортеж с заданным в ручную типами данных и псеводнимами типов данных
let numbersTuple: (Int, Int, numberType, numberType) = (0, 1, 2, 3)



/// Взаимодействие с элементами кортежа

// Объявление и инциализация констант в одной строке = инициализация значений в параметры

// Объявление и инциализация констант в одной строке
let a = 1, b = 2, c = 3

// Инициализация значений в формате кортежа в параметры
let (x, y, z) = (1, 2, 3)
a
b
c
x
y
z


// Инициализация значений кортежа в параметры константы

// Объявляем константу и инициализируем ей кортеж со значениями
let sumTurple = ("Five", "Six", "Seven")

// Объявляем константу, перечислим параметры и проинициализируем в них все значения кортежа. Колл-во параметров константы должно быть столько же, сколько знчений в кортеже, иначе будет ошибка.

// После ключевого слова let в круглых скобках поименно указываем параметры констант кортежа, а после инициализируем в них кортеж, что хранит значения, в итоге значения кортежа должны совпасть с именами кортежа

let (nameFive, nameSix, nameSeven) = sumTurple
nameFive
nameSix
nameSeven

// Инициализация произвольных значений в параметры константы с помощью литерала кортежа
var (trollName, trollAge) = ("Troll", 140)

trollName
trollAge

// Игнорирование произвольных элементов кортежа

// После ключевого слова let в круглых скобках поименно указываем параметры константы, а те параметры в которые мы не хотим передавать значение кортежа - игонорируем с помощью _ , после в нужные параметры инициализируем кортеж.

// В результате в константу seven будет проинициализирован 3-ий элемент кортежа, а остальные будут проигнориованны.

let (_, _, sumSeven) = sumTurple
sumSeven

// Доступ к элементам кортежа через индексы

// Каждый элемент кортежа, помимо значения, содержит целочисленный индекс, который может быть использован для доступа к данному элементу. Индексы всегда расположены по порядку, начиная с нуля.

sumTurple.0
sumTurple.1
sumTurple.2


// Доступ к элементам кортежа через имена

// Определения имен элементов кортежа при явном определении типа данных
let anotherStatusTuple: (statusCode: Int, statusText: String, statusConnect: Bool) = (200, "In Work", true)

// Определения имен элементов кортежа через литерал
let statusTuple = (statusCode: 200, statusText: "In Work", statusConnect: true)

// Редактирование кортежа

// Для однотипных кортежей можно производить операцию инициализации значения одного кортежа в другой.

// Кортежи myFirstTuple и mySecondTuple имеют один и тот же тип данных, поэтому значение одного может быть инициализировано в другой. У первого тип задан явно, а у второго — через инициализируемое значение.

var myFirstTuple: (Int, String) = (0, "0")
let mySecondTuple = (100, "Код")

myFirstTuple = mySecondTuple
myFirstTuple

// Индексы и имена могут использоваться для изменения значений отдельных элементов кортежа

var someTuple = (404, true)
someTuple.0 = 808
someTuple.1 = false

someTuple.0 = 228
someTuple.1 = true


// Сравнение кортежей
// Сравнение кортежей производится последовательным сравнением как самих элементов, так и их колл-во в кортежах слева на право:
// Сперва сравниваются первые элементы обоих кортежей - если они идентичны, то производится сравнение следующих элементов, и так далее до тех пор, пока не будут обнаружены неидентичные элементы.

(1, "alpha") < (2, "beta") // true, так как 1 меньше 2, вторая пара элементов не сравнивается после получения первого true
(4, "beta") < (4, "gamma") // true, так как колл-во символов в "gamma" больше чем в "beta"
(3.14, "pi") == (3.14, "pi") // true, так как все элементы идентичны
