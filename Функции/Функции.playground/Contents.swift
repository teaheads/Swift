// Все входные параметры функции — константы. При попытке изменения их значения внутри тела функции происходит ошибка.

// Если тело функции состоит из одного выражения, значение которого должно быть возвращено, то оператор return может быть опущен.

func multiplication(x: Int, y: Int) -> Int {
    x * y
}
multiplication(x: 2, y: 2)

// Оператор return - используется в теле функуции для возврата значения, что было ей заданно при объявлении и для завершения её работы, как только ход выполнения программы в теле дойдет до return - произойдет выход из функции.

var enterFuncValueOne = 10
var enterFuncValueTwo = 20
var enterFuncValueThree = 30

func sum (x: Int, y: Int) -> Int {
    var funcSum = (x + y) * enterFuncValueOne
    funcSum += enterFuncValueTwo
    funcSum += enterFuncValueThree
    return funcSum
}
sum(x: 2, y: 2)

// Инициализация константе возвращаеме значение функциии.

let exampleLet = sum(x: 2, y: 2)

var x = 2
var y = 2
var z = sum(x: x, y: y)

// Инициализация переменной возвращаеме значение функции, где в качесте аргумента в ее входной параметр передают ту же самую функцию.

z = sum(x: 4, y: sum(x: 4, y: 4))

// Функция без входного параметра/передаваемого аргумента, но с возвращаемым значением.

func example() -> String {
    "Как дела?"
}
example()

// Функции без входного параметра/передаваемого аргумента, без возвращаемого значения.

// 1.
func nAnRT () -> () {
    _ = "Fuck you!"
}
nAnRT()

// 2.
func nAnRTTwo() -> Void {
    _ = "Пошёл нахуй!"
}
nAnRTTwo()

// 3.
func nAnRTThree() {
    _ = "Fuck, fuck and fuck you!"
}
nAnRTThree()

// Варианты записи и отображения имен входных параметров при объявлении и вызове функции.

var pi: Float = 3.14

func enterParametrName (num1: Float, num2: Float, num3: Float) -> Float {
    let expression = num1 * num2 * num3
    return expression / pi
}

// При вызове данной функции у нас отображаются имена входящих параметров, как во время передачи аргументов, так и после.

enterParametrName(num1: 2.1, num2: 2.2, num3: 2.3)

// В данном же случае будет использоваться нижнее подчеркивание (_) и пробел перед каждым именем входящего параметра, чтобы при вызове функции не отображать имена ее входящих параметров при передаче аргумента.

func testing (_ enterThis: String, _ andThis: String) -> Void {
    _ = "Message: \(enterThis + andThis)"
}

// А при вызове данной функции имена входных параметров отображаются только до тех пор, пока мы не начинаем передавать аргументы.

testing("hello ", "world")

// Имеется несколько одинаковых по названию констант, но они разные. т.к первая объявлена в теле цикла, а вторая - за её пределами, т.е вне зоны видимости функции, поэтому они определеяются как разные.
func sumTwoInt(_ a: Int, _ b: Int) -> Int {
    let result = a + b
    return result
}
let result = sumTwoInt(10, 12)

// Для того чтобы была возможность модификации параметров с сохранением измененных значений после окончания работы функции, необходимо использовать сквозные параметры.

// Все сквозные параметры функции — переменные. При попытке изменения их значения внутри тела функции происходит ошибка.

// Чтобы преобразовать входной параметр в сквозной, перед описанием его типа необходимо указать модификатор inout

/// Имена параметров и метки аргументов

// В поиске и при вызове функции использовался параметр shit, в теле функции использовался параметр shit

func noArgumentLabel (shit: Int) -> Int {
    shit + 2
}
noArgumentLabel(shit: 1)

// В поиске и при вызове функции использовался ярлык аргумента kick_you_ass, а в теле функции использовался параметр fuckYou
func argumentLabel(kick_you_ass fuckYou: Int) -> Int {
    fuckYou + 1
}
argumentLabel(kick_you_ass: 1)
