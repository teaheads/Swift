/// Иницилизация копированием
var varA = 1
var varB = varA

varA
varB

let letA = 3
let letB = letA

// Инициализация значения константы с помощью копирования значения ранее объявленной переменной
var sumVar = 3
let sumLet = sumVar

// Инициализация значения константы с помощью копирования значения ранее объявленной константы
let sumExample = sumVar


/// Сокращенное объявление переменных и констант подряд, в одной строке
let myName = "Leonid", myFriendName = "Artem"
var myAge = 26, myFriendAge = 27

// Введение в программирование

// По выражению одного из основателей языков программирования Никлауса Вирта «Программы = алгоритмы + структуры данных»

// Таким образом, алгоритм можно определить как:
// Дискретный детерминированный процесс, который ведёт от начальных данных (входные данные) к искомому результату (данные на выходе), если он существует, за конечное число шагов; если искомого результата не существует, алгоритм или никогда не завершает работу, либо заходит в тупик.

// Алгоритм - это эффективная логичная последовательность действий над конкретной структурой данных для получения результата. В программирование, в виде алгоритма используются операторы

// Данные

// Структура данных

// 1. Операнд - это данные/структура данных с которым ОПЕРАТОР выполняет определенный алгоритм
// 2. Оператор (statements) - символ или набор символов, котрый/которые выполняет/выполняют определенный алгоритм с ОПЕРАНДОМ или ОПЕРАНДАМИ что представлены в виде данных/структуры данных
// 3. Выражение -  это единая комбинация операнд и операторов, выполняющие определенные операции над операндами, в результате чего мы получаем ЗНАЧЕНИЕ - финальный результат работы операторов с операндами
// 4. Значение - полученный результат ВЫРАЖЕНИЯ

// Выражение, состоящее из операнд в виде целых чисел и арифметического оператора, тип значения - целое число
2 + 2
2 - 2
2 * 2
2 / 2
2 % 2 // Арифметический оператор остатка от деления

// Составное арифметическое выражение
// Арифметический оператор умножения имеет приоритет выполнения над сложением и вычитанием
4 + 2 * 2
4 - 2 * 2

// Арифметический оператор деления имеет приоритет выполнения над сложением и вычитанием
4 + 2 / 2
4 - 2 / 2

4 + 2 % 2

// Поменять приоритет выпролнения можно с помошью скобок
(1 + 1) * 2

// 1 * 2 * 3 / 2 * 0 // корректный, но бессмысленный алгоритм, весь предидущий результат вычислений, независимо от его объёма сводится к ничему
// 1 * 2 * 3 / 2 / 0 // некорректный алгоритм, мы не можем делить какое либо число на ничего


// Выражение, состоящее из операнд в виде целых чисел и логического опреатора сравнения, тип значения - bool, true или false
1 < 2
1 > 2
1 <= 2
1 >= 2
1 != 2
1 == 2

// Выражение, состоящее из операнд в виде диапазона чисел и целого числа и логического оператора включает ли?, тип значения - bool, true или false
1...10 ~= 1
1..<10 ~= 1
1... ~= 1

// Составное выражение, включающее в себя ещё несколько выражений
// В первых двух вложенных выражениях используются операнды в виде целых цисел и логический оператор сравнения, тип значения - bool, true или false
// Основное выражение состоит из операнд bool-ого типа и логического оператора И, тип значения - bool, true или false
1 < 2 && 1 < 2
1 < 2 || 1 > 2

1 <= 2 && 1 >= 2
1 != 2 || 1 == 2

1...10 ~= 1 && 1..<10 ~= 1
1... ~= 1 || ...10 ~= 1


