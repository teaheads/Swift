/// Конкатенация - объединение строк в новой переменной с помощью оператора +
let morningGreeting = "Доброе утро"
let friend = "Джуд"
let specialGreeting = morningGreeting + ", " + friend

/// Приведение чиловых типов данных
// В арифметических операциях все операнды должны представлять один и тот же тип данных. Результатом операции является значение того же типа, что и тип операндов:
var a: Int = 10
var b: Int = 8
var c: Int = a + b
print(c)

// Однако в силу различных причин не всегда операнды представляют один и тот же тип. И также не всегда тип переменной или константы, которой присваивается результат операции, совпадает с типом операндов. И в подобных случаях необходимо выполнять преобразования типов.

// Если операнды операций представляют числовые литералы, которые относятся к разным типам, то Swift автоматически (неявное преобразование) выполняет преобразование:
let x = 10 / 3.0
print(x)
// В данном случае числовой литерал 10 представляет тип Int
// 3.0 - тип Double
// В этом случае первый литерал преобразуется к типу Double, и выполняется деление.

// Однако если операнды представляют константы или переменные или являются результатами каких-то других операций или выражений, то в этом случае нам нужно выполнять явное преобразование типов.
// Для этого применяются специальные функции-инициализаторы типов данных.
// Все они совпадают с названиями типов данных: Int8(), Int(), Float(), Double() и т.д. Так, функция Double() преобразует значение к типу Double, а в скобки передается само значение. Например:

let exampleInt = 1
let exampleDouble = 2.0
var sumExampleDouble = 0.0

sumExampleDouble = exampleDouble + Double(exampleInt)

print(exampleInt)
print(exampleDouble)
print(sumExampleDouble)
// Объявляем константу с именем exampleInt и инициализируем ей значение 1
// Объявляем константу с именем exampleDouble и инициализируем ей значение 2.0
// Объявляем переменную с именем sumExampleDouble и инициализируем ей значение 0.0

// sumExampleDouble = exampleDouble + Double(exampleInt)

// Алгоритм выполнения sumExampleDouble = exampleDouble + Double(exampleInt):

// 1. Используем явное преобразование типов: передаём в специальную функцию-инициализатор типа данных Double() значение константы exampleInt
// 2. Выполняем сложение: exampleDouble + Double(exampleInt)
// 3. К значению переменной sumExampleDouble присваиваем результат сложения exampleDouble и Double(exampleInt)

// Поскольку явное приведение типа было выполнено с помощью специальной функции, то тип значения exampleInt при выходе из выражения остался так же Int, убедимся в этом с помошью print()

// print(exampleInt); exampleInt: Int = 1
// print(exampleDouble); exampleDouble: Double = 2.0
// print(sumExampleDouble); sumExampleDouble: Double = 3.0
